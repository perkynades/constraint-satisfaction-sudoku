{"version":3,"sources":["SudokuGrid.tsx","sudokuSolver.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SudokuGrid","sudokuGrid","setGridCell","value","gridString","toString","rows","map","item","i","entry","element","j","className","isValid","grid","row","col","digit","m","Math","floor","n","backtracker","backtrackerCounter","k","backtrackerReturnFalseCounter","App","useState","setSudokuGrid","backtrackersCounter","setBacktrackersCounter","bakcktrackFailureCounter","setBacktrackFailureCounter","parsed","setParsed","fileUploaded","setFileUploaded","type","onChange","event","reader","FileReader","file","target","files","onload","e","result","readAsText","CheckOutlined","onClick","array","split","filter","Number","newArray","length","push","splice","copy","setBacktrackerReturnFalseCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1bc002f.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\r\nimport './SudokuGrid.css'\r\n\r\nexport default function SudokuGrid({ sudokuGrid }: { sudokuGrid: number[][] }): ReactElement {\r\n    const setGridCell = (value: number): string => {\r\n        let gridString = ''\r\n\r\n        if (value !== 0) {\r\n            gridString = value.toString()\r\n        }\r\n\r\n        return gridString\r\n    }\r\n\r\n    let rows = sudokuGrid.map(function (item, i) {\r\n        let entry = item.map(function (element, j) {\r\n            return (\r\n                <td key={j} className=\"element\">\r\n                    {setGridCell(element)}\r\n                </td>\r\n            )\r\n        })\r\n        return (\r\n            <tr key={i} className=\"entry\">\r\n                {entry}\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <table className=\"grid\">\r\n            <tbody>{rows}</tbody>\r\n        </table>\r\n    )\r\n}\r\n","/**\r\n * A function that determines if a digit can be placed in a sudoku\r\n * grid cell.\r\n */\r\nfunction isValid(grid: number[][], row: number, col: number, digit: number) {\r\n    for (let i = 0; i < 9; i++) {\r\n        const m = 3 * Math.floor(row / 3) + Math.floor(i / 3)\r\n        const n = 3 * Math.floor(col / 3) + (i % 3)\r\n        if (grid[row][i] === digit || grid[i][col] === digit || grid[m][n] === digit) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n/**\r\n * A backtracker function that is used to solve a game of sudoku.\r\n * For every call of the backtracker function, the sudoku grid will be \r\n * checked to see if it is solved or not. If it is not solved the\r\n * backtracker function will be called recursivly to try solve to sudoku\r\n * grid iterativly.\r\n * \r\n * @param grid The sudoku grid to solve\r\n * @returns if the grid is solved or not\r\n */\r\nexport function backtracker(grid: number[][]): boolean {\r\n    backtrackerCounter++\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            if (grid[i][j] === 0) {\r\n                for (let k = 1; k <= 9; k++) {\r\n                    if (isValid(grid, i, j, k)) {\r\n                        grid[i][j] = k\r\n                        if (backtracker(grid)) {\r\n                            return true\r\n                        } else {\r\n                            grid[i][j] = 0\r\n                        }\r\n                    }\r\n                }\r\n                backtrackerReturnFalseCounter++\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n\r\nexport let backtrackerCounter: number = 0;\r\nexport function setBacktrackerCounter(value: number) {\r\n    backtrackerCounter = value\r\n}\r\n\r\nexport let backtrackerReturnFalseCounter: number = 0\r\nexport function setBacktrackerReturnFalseCounter(value: number) {\r\n    backtrackerReturnFalseCounter = value\r\n}","import React, { ReactElement, useState } from 'react'\nimport './App.css'\nimport SudokuGrid from './SudokuGrid'\nimport {\n    setBacktrackerCounter,\n    setBacktrackerReturnFalseCounter,\n    backtracker,\n    backtrackerCounter,\n    backtrackerReturnFalseCounter,\n} from './sudokuSolver'\nimport { CheckOutlined } from '@ant-design/icons'\n\nfunction App(): ReactElement {\n    const [sudokuGrid, setSudokuGrid] = useState<number[][]>([])\n\n    const [backtrackersCounter, setBacktrackersCounter] = useState<number>(0)\n    const [bakcktrackFailureCounter, setBacktrackFailureCounter] = useState<number>(0)\n\n    const [parsed, setParsed] = useState<string | ArrayBuffer | undefined | null>()\n\n    const [fileUploaded, setFileUploaded] = useState<boolean>(false)\n\n    const displaySudoku = (event: any) => {\n        const reader = new FileReader()\n        const file = event.target.files[0]\n        reader.onload = (e) => {\n            setParsed(e.target?.result)\n            setFileUploaded(true)\n        }\n        reader.readAsText(file)\n    }\n\n    const parseFileString = () => {\n        let array: number[] = []\n        if (typeof parsed == 'string') {\n            array = parsed\n                .split('')\n                .filter((item) => item !== '\\n')\n                .map(Number)\n        }\n\n        let newArray: number[][] = []\n        while (array.length) {\n            newArray.push(array.splice(0, 9))\n        }\n        setSudokuGrid(newArray)\n    }\n\n    const solve = () => {\n        let copy = [...sudokuGrid]\n        backtracker(copy)\n        setSudokuGrid(copy)\n\n        setBacktrackersCounter(backtrackerCounter)\n        setBacktrackFailureCounter(backtrackerReturnFalseCounter)\n\n        setBacktrackerCounter(0)\n        setBacktrackerReturnFalseCounter(0)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"file-upload-container\">\n                <label className=\"file-upload\">\n                    <input type=\"file\" onChange={displaySudoku}></input>\n                    Upload file\n                </label>\n                {fileUploaded && <CheckOutlined className=\"file-upload-icon\" />}\n            </div>\n            <button onClick={parseFileString}>Create sudoku grid</button>\n            <SudokuGrid sudokuGrid={sudokuGrid} />\n            <p>Backtracker function called {backtrackersCounter} times</p>\n            <p>Backtracker function returned false {bakcktrackFailureCounter} times</p>\n            <button onClick={solve}>Start solving</button>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}